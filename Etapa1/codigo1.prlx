{Código para realizar operação de um Full-Adder de acordo com as variáveis}
{dentro de um vetor}

{Observações}
{Adicição de um comando BREAK}
{operador de MÓDULO}
{Perguntar sobre o acesso do vetor quando ele possue apenas um 'linha'}

This is program Codigo.
It presents:
    vector of number (4X2) Entrada_Dec; {Vetor com as entradas em decimla para o Full-Adder}
    vector of number (4X8) Entrada_Bin; {Vetor com as entradas em binário para o Full-Adder}
    vector of number (4X2) Saida_Dec; {Vetor com as saidas em decimla do Full-Adder}
    vector of number (4X8) Saida_Bin; {Vetor com as saidas em binário do Full-Adder}

    alterable number soma := -1; {Resultado da soma das entradas por meio operador}
    unalterable number media; {Resultado da média das entradas por meio operador}
    alterable number media_FA := -1; {Resultado da média das entradas por meio do Full-Adder}

    vector of symbol (1X128) resposta; {Resposta para debug de erros no sistema}

    alterable number i := 1;
    alterable number contador1 := 1;
    alterable number contador2 := 1;
    alterable number contador3 := 1;
    alterable number contador4 := 0;

    alterable number atual_Dec := 0;
    alterable number (1X8) atual_Bin := 0;

    alterable number A := 0;
    alterable number B := 0;
    alterable number cin := 0;
    alterable number cout := 0;
    alterable number S := 0;

    vector of number (1,3) wire;


Let us begin:

    {========Declaração do vetor de entrada========}
    
    considering contador1 from 1 to 5 by 1 do [ {Verficiar com a professora se o loop ele itera até o valor final, ou se encerra no valor final}
        
        resposta (1) := "Digite seu vetor de entrada:";
        
        show(resposta);
        capture(Entrada_Dec(contador1));

        just in case that ( Entrada_Dec(contador1) != NUMBER) do [
            resposta (1) := "Valor de entrada deve ser um número em decimal";
            show(resposta);

            abandon;
        ]

        just in case that ( Entrada_Dec(contador1) >= 100) do [
            resposta (1) := "Valor de entrada deve ser um número em decimal menor que 100";
            show(resposta);

            abandon;
        ]

        just in case that ( Entrada_Dec(contador1) <= -100) do [
            resposta (1) := "Valor de entrada deve ser um número em decimal maior que -100";
            show(resposta);

            abandon;
        ]

    ]


    {========Cálculo da média dos valores de entrada========}

    considering contador1 from 1 to 5 by 1 do [
        soma := soma + Entrada_Dec(contador1);
    ]

    media = soma // 4;


    {========Módulo de conversão do valor decimal para binário========}

    as long as ( (5 - contador2) != 0 ) do [
        atual_Dec := Entrada_Dec(contador2);

        just in case that ( atual_Dec == 0 ) do [
            Entrada_Bin(contador2, contador3) := 0;
        ]

        otherwise do [
            as long as ( atual_Dec > 0 ) do [
                Entrada_Bin(contador2, contador3) := atual_Dec {operador de MÓDULO AQUI!!!} 2;
                atual_Dec := atual_Dec // 2;
                contador3 = contador3 + 1;
            ]
        
        ]

        contador3 := 1;
        contador2 := contador2 + 1;
    ]

    {========Módulo do Full-Adder========}

    {Soma as 4 entradas no vetor em pares}

    considering i from 1 to 5 by 2 do [
        
        considering contador1 from 1 to 9 by 1 do [
            A := Entrada_Bin(i,contador1);
            B := Entrada_Bin(i+1,contador1);
            wire(1) := A xor B;
            wire(2) := A and B;
            wire(3) := wire(1) and cin;
            S := wire(1) xor cin;
            cout := wire(2) or wire(3);
            
            Saida_Bin(i,contador1) := S; 

        ]

    ]

    {Soma os 2 resultados das somas}

    considering contador1 from 1 to 9 by 1 do [
        A := Saida_Bin(1,contador1);
        B := Saida_Bin(3,contador1);
        wire(1) := A xor B;
        wire(2) := A and B;
        wire(3) := wire(1) and cin;
        S := wire(1) xor cin;
        cout := wire(2) or wire(3);
        
        Saida_Bin(2,contador1) := S; 

    ]


    {========Módulo de conversão do valor binário para decimal========}

    as long as ( (5 - contador2) != 0 ) do [
        atual_Bin(contador2) := Saida_Bin(contador2);

        as long as ( 0 < (9 - contador3) ) do [

            {Improviso para realizar uma operação de expoente}
            considering contador4 from 0 to contador3 by 1 do [

                just in case that ( contador4 == !(0) ) do [
                    atual_Dec(contador2) := atual_Dec(contador2) + Saida_Bin(contador2,contador3);
                    go to next iteration;
                ]

                otherwise do [

                    just in case that ( Saida_Bin(contador2,contador3) == 1 ) do [
                        atual_Dec(contador2) := atual_Dec(contador2) + ( ( contador4 * 2 ) * (Saida_Bin(contador2,contador3)) );
                    ]
                
                ]

            ]

            contador3 := contador3 + 1;
        ]

        contador2 := contador2 + 1;
    ]

    considering i from 1 to 5 by 1 do [
        Saida_Dec(i) := atual_Dec(i);
    ]

    media_FA := Saida_Dec(2) // 4;

    show(Saida_Dec);
    show(media);
    show(media_FA);


That would be all.