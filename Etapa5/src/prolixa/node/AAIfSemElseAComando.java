/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAIfSemElseAComando extends PAComando
{
    private PAExp _exp_;
    private PAComando _cmd_;

    public AAIfSemElseAComando()
    {
        // Constructor
    }

    public AAIfSemElseAComando(
        @SuppressWarnings("hiding") PAExp _exp_,
        @SuppressWarnings("hiding") PAComando _cmd_)
    {
        // Constructor
        setExp(_exp_);

        setCmd(_cmd_);

    }

    @Override
    public Object clone()
    {
        return new AAIfSemElseAComando(
            cloneNode(this._exp_),
            cloneNode(this._cmd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAIfSemElseAComando(this);
    }

    public PAExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PAExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PAComando getCmd()
    {
        return this._cmd_;
    }

    public void setCmd(PAComando node)
    {
        if(this._cmd_ != null)
        {
            this._cmd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cmd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._cmd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._cmd_ == child)
        {
            this._cmd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PAExp) newChild);
            return;
        }

        if(this._cmd_ == oldChild)
        {
            setCmd((PAComando) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
