/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAGrammar extends PAGrammar
{
    private PAPackage _package_;
    private PAHelpers _helpers_;
    private PAStates _states_;
    private PATokens _tokens_;
    private PAIgnTokens _ignTokens_;
    private PAProductions _productions_;

    public AAGrammar()
    {
        // Constructor
    }

    public AAGrammar(
        @SuppressWarnings("hiding") PAPackage _package_,
        @SuppressWarnings("hiding") PAHelpers _helpers_,
        @SuppressWarnings("hiding") PAStates _states_,
        @SuppressWarnings("hiding") PATokens _tokens_,
        @SuppressWarnings("hiding") PAIgnTokens _ignTokens_,
        @SuppressWarnings("hiding") PAProductions _productions_)
    {
        // Constructor
        setPackage(_package_);

        setHelpers(_helpers_);

        setStates(_states_);

        setTokens(_tokens_);

        setIgnTokens(_ignTokens_);

        setProductions(_productions_);

    }

    @Override
    public Object clone()
    {
        return new AAGrammar(
            cloneNode(this._package_),
            cloneNode(this._helpers_),
            cloneNode(this._states_),
            cloneNode(this._tokens_),
            cloneNode(this._ignTokens_),
            cloneNode(this._productions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAGrammar(this);
    }

    public PAPackage getPackage()
    {
        return this._package_;
    }

    public void setPackage(PAPackage node)
    {
        if(this._package_ != null)
        {
            this._package_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._package_ = node;
    }

    public PAHelpers getHelpers()
    {
        return this._helpers_;
    }

    public void setHelpers(PAHelpers node)
    {
        if(this._helpers_ != null)
        {
            this._helpers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._helpers_ = node;
    }

    public PAStates getStates()
    {
        return this._states_;
    }

    public void setStates(PAStates node)
    {
        if(this._states_ != null)
        {
            this._states_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._states_ = node;
    }

    public PATokens getTokens()
    {
        return this._tokens_;
    }

    public void setTokens(PATokens node)
    {
        if(this._tokens_ != null)
        {
            this._tokens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tokens_ = node;
    }

    public PAIgnTokens getIgnTokens()
    {
        return this._ignTokens_;
    }

    public void setIgnTokens(PAIgnTokens node)
    {
        if(this._ignTokens_ != null)
        {
            this._ignTokens_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ignTokens_ = node;
    }

    public PAProductions getProductions()
    {
        return this._productions_;
    }

    public void setProductions(PAProductions node)
    {
        if(this._productions_ != null)
        {
            this._productions_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._productions_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._package_)
            + toString(this._helpers_)
            + toString(this._states_)
            + toString(this._tokens_)
            + toString(this._ignTokens_)
            + toString(this._productions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._package_ == child)
        {
            this._package_ = null;
            return;
        }

        if(this._helpers_ == child)
        {
            this._helpers_ = null;
            return;
        }

        if(this._states_ == child)
        {
            this._states_ = null;
            return;
        }

        if(this._tokens_ == child)
        {
            this._tokens_ = null;
            return;
        }

        if(this._ignTokens_ == child)
        {
            this._ignTokens_ = null;
            return;
        }

        if(this._productions_ == child)
        {
            this._productions_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._package_ == oldChild)
        {
            setPackage((PAPackage) newChild);
            return;
        }

        if(this._helpers_ == oldChild)
        {
            setHelpers((PAHelpers) newChild);
            return;
        }

        if(this._states_ == oldChild)
        {
            setStates((PAStates) newChild);
            return;
        }

        if(this._tokens_ == oldChild)
        {
            setTokens((PATokens) newChild);
            return;
        }

        if(this._ignTokens_ == oldChild)
        {
            setIgnTokens((PAIgnTokens) newChild);
            return;
        }

        if(this._productions_ == oldChild)
        {
            setProductions((PAProductions) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
