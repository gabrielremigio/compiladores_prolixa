/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAExprUn extends PAExprUn
{
    private PABasic _basic_;
    private PAOpUn _op_;

    public AAExprUn()
    {
        // Constructor
    }

    public AAExprUn(
        @SuppressWarnings("hiding") PABasic _basic_,
        @SuppressWarnings("hiding") PAOpUn _op_)
    {
        // Constructor
        setBasic(_basic_);

        setOp(_op_);

    }

    @Override
    public Object clone()
    {
        return new AAExprUn(
            cloneNode(this._basic_),
            cloneNode(this._op_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAExprUn(this);
    }

    public PABasic getBasic()
    {
        return this._basic_;
    }

    public void setBasic(PABasic node)
    {
        if(this._basic_ != null)
        {
            this._basic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._basic_ = node;
    }

    public PAOpUn getOp()
    {
        return this._op_;
    }

    public void setOp(PAOpUn node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._basic_)
            + toString(this._op_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._basic_ == child)
        {
            this._basic_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._basic_ == oldChild)
        {
            setBasic((PABasic) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((PAOpUn) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
