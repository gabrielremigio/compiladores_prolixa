/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAOperacaoAConjunto extends PAConjunto
{
    private PABasic _left_;
    private PAOpBin _op_;
    private PABasic _right_;

    public AAOperacaoAConjunto()
    {
        // Constructor
    }

    public AAOperacaoAConjunto(
        @SuppressWarnings("hiding") PABasic _left_,
        @SuppressWarnings("hiding") PAOpBin _op_,
        @SuppressWarnings("hiding") PABasic _right_)
    {
        // Constructor
        setLeft(_left_);

        setOp(_op_);

        setRight(_right_);

    }

    @Override
    public Object clone()
    {
        return new AAOperacaoAConjunto(
            cloneNode(this._left_),
            cloneNode(this._op_),
            cloneNode(this._right_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAOperacaoAConjunto(this);
    }

    public PABasic getLeft()
    {
        return this._left_;
    }

    public void setLeft(PABasic node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public PAOpBin getOp()
    {
        return this._op_;
    }

    public void setOp(PAOpBin node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    public PABasic getRight()
    {
        return this._right_;
    }

    public void setRight(PABasic node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._left_)
            + toString(this._op_)
            + toString(this._right_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._left_ == oldChild)
        {
            setLeft((PABasic) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((PAOpBin) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((PABasic) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
