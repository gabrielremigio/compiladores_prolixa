/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAElem extends PAElem
{
    private PAElemName _nome_;
    private PASpecifier _spec_;
    private TIdentificador _id_;
    private PAOpUn _op_;

    public AAElem()
    {
        // Constructor
    }

    public AAElem(
        @SuppressWarnings("hiding") PAElemName _nome_,
        @SuppressWarnings("hiding") PASpecifier _spec_,
        @SuppressWarnings("hiding") TIdentificador _id_,
        @SuppressWarnings("hiding") PAOpUn _op_)
    {
        // Constructor
        setNome(_nome_);

        setSpec(_spec_);

        setId(_id_);

        setOp(_op_);

    }

    @Override
    public Object clone()
    {
        return new AAElem(
            cloneNode(this._nome_),
            cloneNode(this._spec_),
            cloneNode(this._id_),
            cloneNode(this._op_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAElem(this);
    }

    public PAElemName getNome()
    {
        return this._nome_;
    }

    public void setNome(PAElemName node)
    {
        if(this._nome_ != null)
        {
            this._nome_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nome_ = node;
    }

    public PASpecifier getSpec()
    {
        return this._spec_;
    }

    public void setSpec(PASpecifier node)
    {
        if(this._spec_ != null)
        {
            this._spec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._spec_ = node;
    }

    public TIdentificador getId()
    {
        return this._id_;
    }

    public void setId(TIdentificador node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public PAOpUn getOp()
    {
        return this._op_;
    }

    public void setOp(PAOpUn node)
    {
        if(this._op_ != null)
        {
            this._op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._op_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nome_)
            + toString(this._spec_)
            + toString(this._id_)
            + toString(this._op_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nome_ == child)
        {
            this._nome_ = null;
            return;
        }

        if(this._spec_ == child)
        {
            this._spec_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._op_ == child)
        {
            this._op_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nome_ == oldChild)
        {
            setNome((PAElemName) newChild);
            return;
        }

        if(this._spec_ == oldChild)
        {
            setSpec((PASpecifier) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TIdentificador) newChild);
            return;
        }

        if(this._op_ == oldChild)
        {
            setOp((PAOpUn) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
