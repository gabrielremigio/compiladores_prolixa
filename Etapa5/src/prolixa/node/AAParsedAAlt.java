/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAParsedAAlt extends PAAlt
{
    private PAAltName _nome_;
    private final LinkedList<PAElem> _elems_ = new LinkedList<PAElem>();

    public AAParsedAAlt()
    {
        // Constructor
    }

    public AAParsedAAlt(
        @SuppressWarnings("hiding") PAAltName _nome_,
        @SuppressWarnings("hiding") List<?> _elems_)
    {
        // Constructor
        setNome(_nome_);

        setElems(_elems_);

    }

    @Override
    public Object clone()
    {
        return new AAParsedAAlt(
            cloneNode(this._nome_),
            cloneList(this._elems_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAParsedAAlt(this);
    }

    public PAAltName getNome()
    {
        return this._nome_;
    }

    public void setNome(PAAltName node)
    {
        if(this._nome_ != null)
        {
            this._nome_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nome_ = node;
    }

    public LinkedList<PAElem> getElems()
    {
        return this._elems_;
    }

    public void setElems(List<?> list)
    {
        for(PAElem e : this._elems_)
        {
            e.parent(null);
        }
        this._elems_.clear();

        for(Object obj_e : list)
        {
            PAElem e = (PAElem) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._elems_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nome_)
            + toString(this._elems_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nome_ == child)
        {
            this._nome_ = null;
            return;
        }

        if(this._elems_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nome_ == oldChild)
        {
            setNome((PAAltName) newChild);
            return;
        }

        for(ListIterator<PAElem> i = this._elems_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAElem) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
