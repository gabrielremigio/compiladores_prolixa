/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import java.util.*;
import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAExprReg extends PAExprReg
{
    private PAConcat _primeiro_;
    private final LinkedList<PAExprRegTail> _resto_ = new LinkedList<PAExprRegTail>();

    public AAExprReg()
    {
        // Constructor
    }

    public AAExprReg(
        @SuppressWarnings("hiding") PAConcat _primeiro_,
        @SuppressWarnings("hiding") List<?> _resto_)
    {
        // Constructor
        setPrimeiro(_primeiro_);

        setResto(_resto_);

    }

    @Override
    public Object clone()
    {
        return new AAExprReg(
            cloneNode(this._primeiro_),
            cloneList(this._resto_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAExprReg(this);
    }

    public PAConcat getPrimeiro()
    {
        return this._primeiro_;
    }

    public void setPrimeiro(PAConcat node)
    {
        if(this._primeiro_ != null)
        {
            this._primeiro_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._primeiro_ = node;
    }

    public LinkedList<PAExprRegTail> getResto()
    {
        return this._resto_;
    }

    public void setResto(List<?> list)
    {
        for(PAExprRegTail e : this._resto_)
        {
            e.parent(null);
        }
        this._resto_.clear();

        for(Object obj_e : list)
        {
            PAExprRegTail e = (PAExprRegTail) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._resto_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._primeiro_)
            + toString(this._resto_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._primeiro_ == child)
        {
            this._primeiro_ = null;
            return;
        }

        if(this._resto_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._primeiro_ == oldChild)
        {
            setPrimeiro((PAConcat) newChild);
            return;
        }

        for(ListIterator<PAExprRegTail> i = this._resto_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PAExprRegTail) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
