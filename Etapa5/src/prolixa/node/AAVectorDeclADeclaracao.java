/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.node;

import prolixa.analysis.*;

@SuppressWarnings("nls")
public final class AAVectorDeclADeclaracao extends PADeclaracao
{
    private PATipo _tipo_;
    private PAExp _tamanhos_;
    private TIdentificador _nome_;

    public AAVectorDeclADeclaracao()
    {
        // Constructor
    }

    public AAVectorDeclADeclaracao(
        @SuppressWarnings("hiding") PATipo _tipo_,
        @SuppressWarnings("hiding") PAExp _tamanhos_,
        @SuppressWarnings("hiding") TIdentificador _nome_)
    {
        // Constructor
        setTipo(_tipo_);

        setTamanhos(_tamanhos_);

        setNome(_nome_);

    }

    @Override
    public Object clone()
    {
        return new AAVectorDeclADeclaracao(
            cloneNode(this._tipo_),
            cloneNode(this._tamanhos_),
            cloneNode(this._nome_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAVectorDeclADeclaracao(this);
    }

    public PATipo getTipo()
    {
        return this._tipo_;
    }

    public void setTipo(PATipo node)
    {
        if(this._tipo_ != null)
        {
            this._tipo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tipo_ = node;
    }

    public PAExp getTamanhos()
    {
        return this._tamanhos_;
    }

    public void setTamanhos(PAExp node)
    {
        if(this._tamanhos_ != null)
        {
            this._tamanhos_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tamanhos_ = node;
    }

    public TIdentificador getNome()
    {
        return this._nome_;
    }

    public void setNome(TIdentificador node)
    {
        if(this._nome_ != null)
        {
            this._nome_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nome_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tipo_)
            + toString(this._tamanhos_)
            + toString(this._nome_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tipo_ == child)
        {
            this._tipo_ = null;
            return;
        }

        if(this._tamanhos_ == child)
        {
            this._tamanhos_ = null;
            return;
        }

        if(this._nome_ == child)
        {
            this._nome_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tipo_ == oldChild)
        {
            setTipo((PATipo) newChild);
            return;
        }

        if(this._tamanhos_ == oldChild)
        {
            setTamanhos((PAExp) newChild);
            return;
        }

        if(this._nome_ == oldChild)
        {
            setNome((TIdentificador) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
