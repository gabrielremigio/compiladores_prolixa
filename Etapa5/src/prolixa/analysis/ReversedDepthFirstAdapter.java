/* This file was generated by SableCC (http://www.sablecc.org/). */

package prolixa.analysis;

import java.util.*;
import prolixa.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAStart().apply(this);
        outStart(node);
    }

    public void inAAGrammarAStart(AAGrammarAStart node)
    {
        defaultIn(node);
    }

    public void outAAGrammarAStart(AAGrammarAStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGrammarAStart(AAGrammarAStart node)
    {
        inAAGrammarAStart(node);
        if(node.getGramatica() != null)
        {
            node.getGramatica().apply(this);
        }
        outAAGrammarAStart(node);
    }

    public void inAAProgramaAStart(AAProgramaAStart node)
    {
        defaultIn(node);
    }

    public void outAAProgramaAStart(AAProgramaAStart node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProgramaAStart(AAProgramaAStart node)
    {
        inAAProgramaAStart(node);
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAAProgramaAStart(node);
    }

    public void inAAGrammar(AAGrammar node)
    {
        defaultIn(node);
    }

    public void outAAGrammar(AAGrammar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGrammar(AAGrammar node)
    {
        inAAGrammar(node);
        if(node.getProductions() != null)
        {
            node.getProductions().apply(this);
        }
        if(node.getIgnTokens() != null)
        {
            node.getIgnTokens().apply(this);
        }
        if(node.getTokens() != null)
        {
            node.getTokens().apply(this);
        }
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        if(node.getHelpers() != null)
        {
            node.getHelpers().apply(this);
        }
        if(node.getPackage() != null)
        {
            node.getPackage().apply(this);
        }
        outAAGrammar(node);
    }

    public void inAAPackage(AAPackage node)
    {
        defaultIn(node);
    }

    public void outAAPackage(AAPackage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPackage(AAPackage node)
    {
        inAAPackage(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAPackage(node);
    }

    public void inAAPkgName(AAPkgName node)
    {
        defaultIn(node);
    }

    public void outAAPkgName(AAPkgName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPkgName(AAPkgName node)
    {
        inAAPkgName(node);
        {
            List<PAPkgNameTail> copy = new ArrayList<PAPkgNameTail>(node.getIds());
            Collections.reverse(copy);
            for(PAPkgNameTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAPkgName(node);
    }

    public void inAAPkgNameTail(AAPkgNameTail node)
    {
        defaultIn(node);
    }

    public void outAAPkgNameTail(AAPkgNameTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPkgNameTail(AAPkgNameTail node)
    {
        inAAPkgNameTail(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAPkgNameTail(node);
    }

    public void inAAHelpers(AAHelpers node)
    {
        defaultIn(node);
    }

    public void outAAHelpers(AAHelpers node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAHelpers(AAHelpers node)
    {
        inAAHelpers(node);
        {
            List<PAHelperDef> copy = new ArrayList<PAHelperDef>(node.getDefs());
            Collections.reverse(copy);
            for(PAHelperDef e : copy)
            {
                e.apply(this);
            }
        }
        outAAHelpers(node);
    }

    public void inAAHelperDef(AAHelperDef node)
    {
        defaultIn(node);
    }

    public void outAAHelperDef(AAHelperDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAHelperDef(AAHelperDef node)
    {
        inAAHelperDef(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAHelperDef(node);
    }

    public void inAAStates(AAStates node)
    {
        defaultIn(node);
    }

    public void outAAStates(AAStates node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStates(AAStates node)
    {
        inAAStates(node);
        if(node.getLista() != null)
        {
            node.getLista().apply(this);
        }
        outAAStates(node);
    }

    public void inAAIdList(AAIdList node)
    {
        defaultIn(node);
    }

    public void outAAIdList(AAIdList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdList(AAIdList node)
    {
        inAAIdList(node);
        {
            List<PAIdListTail> copy = new ArrayList<PAIdListTail>(node.getResto());
            Collections.reverse(copy);
            for(PAIdListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAAIdList(node);
    }

    public void inAAIdListTail(AAIdListTail node)
    {
        defaultIn(node);
    }

    public void outAAIdListTail(AAIdListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdListTail(AAIdListTail node)
    {
        inAAIdListTail(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdListTail(node);
    }

    public void inAATokens(AATokens node)
    {
        defaultIn(node);
    }

    public void outAATokens(AATokens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATokens(AATokens node)
    {
        inAATokens(node);
        {
            List<PATokenDef> copy = new ArrayList<PATokenDef>(node.getDefs());
            Collections.reverse(copy);
            for(PATokenDef e : copy)
            {
                e.apply(this);
            }
        }
        outAATokens(node);
    }

    public void inAATokenDef(AATokenDef node)
    {
        defaultIn(node);
    }

    public void outAATokenDef(AATokenDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATokenDef(AATokenDef node)
    {
        inAATokenDef(node);
        if(node.getLook() != null)
        {
            node.getLook().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        if(node.getStates() != null)
        {
            node.getStates().apply(this);
        }
        outAATokenDef(node);
    }

    public void inAAStateList(AAStateList node)
    {
        defaultIn(node);
    }

    public void outAAStateList(AAStateList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStateList(AAStateList node)
    {
        inAAStateList(node);
        {
            List<PAStateListTail> copy = new ArrayList<PAStateListTail>(node.getResto());
            Collections.reverse(copy);
            for(PAStateListTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTrans() != null)
        {
            node.getTrans().apply(this);
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAAStateList(node);
    }

    public void inAAStateListTail(AAStateListTail node)
    {
        defaultIn(node);
    }

    public void outAAStateListTail(AAStateListTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStateListTail(AAStateListTail node)
    {
        inAAStateListTail(node);
        if(node.getTrans() != null)
        {
            node.getTrans().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAStateListTail(node);
    }

    public void inAATransition(AATransition node)
    {
        defaultIn(node);
    }

    public void outAATransition(AATransition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATransition(AATransition node)
    {
        inAATransition(node);
        if(node.getDestino() != null)
        {
            node.getDestino().apply(this);
        }
        outAATransition(node);
    }

    public void inAAIgnTokens(AAIgnTokens node)
    {
        defaultIn(node);
    }

    public void outAAIgnTokens(AAIgnTokens node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIgnTokens(AAIgnTokens node)
    {
        inAAIgnTokens(node);
        if(node.getLista() != null)
        {
            node.getLista().apply(this);
        }
        outAAIgnTokens(node);
    }

    public void inAALookAhead(AALookAhead node)
    {
        defaultIn(node);
    }

    public void outAALookAhead(AALookAhead node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALookAhead(AALookAhead node)
    {
        inAALookAhead(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAALookAhead(node);
    }

    public void inAAExprReg(AAExprReg node)
    {
        defaultIn(node);
    }

    public void outAAExprReg(AAExprReg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprReg(AAExprReg node)
    {
        inAAExprReg(node);
        {
            List<PAExprRegTail> copy = new ArrayList<PAExprRegTail>(node.getResto());
            Collections.reverse(copy);
            for(PAExprRegTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAAExprReg(node);
    }

    public void inAAExprRegTail(AAExprRegTail node)
    {
        defaultIn(node);
    }

    public void outAAExprRegTail(AAExprRegTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprRegTail(AAExprRegTail node)
    {
        inAAExprRegTail(node);
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        outAAExprRegTail(node);
    }

    public void inAAConcat(AAConcat node)
    {
        defaultIn(node);
    }

    public void outAAConcat(AAConcat node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConcat(AAConcat node)
    {
        inAAConcat(node);
        {
            List<PAExprUn> copy = new ArrayList<PAExprUn>(node.getExprs());
            Collections.reverse(copy);
            for(PAExprUn e : copy)
            {
                e.apply(this);
            }
        }
        outAAConcat(node);
    }

    public void inAAExprUn(AAExprUn node)
    {
        defaultIn(node);
    }

    public void outAAExprUn(AAExprUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprUn(AAExprUn node)
    {
        inAAExprUn(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getBasic() != null)
        {
            node.getBasic().apply(this);
        }
        outAAExprUn(node);
    }

    public void inAACharABasic(AACharABasic node)
    {
        defaultIn(node);
    }

    public void outAACharABasic(AACharABasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACharABasic(AACharABasic node)
    {
        inAACharABasic(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outAACharABasic(node);
    }

    public void inAAConjuntoABasic(AAConjuntoABasic node)
    {
        defaultIn(node);
    }

    public void outAAConjuntoABasic(AAConjuntoABasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConjuntoABasic(AAConjuntoABasic node)
    {
        inAAConjuntoABasic(node);
        if(node.getConj() != null)
        {
            node.getConj().apply(this);
        }
        outAAConjuntoABasic(node);
    }

    public void inAAStringABasic(AAStringABasic node)
    {
        defaultIn(node);
    }

    public void outAAStringABasic(AAStringABasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStringABasic(AAStringABasic node)
    {
        inAAStringABasic(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAStringABasic(node);
    }

    public void inAAIdentificadorABasic(AAIdentificadorABasic node)
    {
        defaultIn(node);
    }

    public void outAAIdentificadorABasic(AAIdentificadorABasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdentificadorABasic(AAIdentificadorABasic node)
    {
        inAAIdentificadorABasic(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAAIdentificadorABasic(node);
    }

    public void inAAExprRegABasic(AAExprRegABasic node)
    {
        defaultIn(node);
    }

    public void outAAExprRegABasic(AAExprRegABasic node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprRegABasic(AAExprRegABasic node)
    {
        inAAExprRegABasic(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAExprRegABasic(node);
    }

    public void inAACharAChar(AACharAChar node)
    {
        defaultIn(node);
    }

    public void outAACharAChar(AACharAChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACharAChar(AACharAChar node)
    {
        inAACharAChar(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outAACharAChar(node);
    }

    public void inAADecAChar(AADecAChar node)
    {
        defaultIn(node);
    }

    public void outAADecAChar(AADecAChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADecAChar(AADecAChar node)
    {
        inAADecAChar(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAADecAChar(node);
    }

    public void inAAHexAChar(AAHexAChar node)
    {
        defaultIn(node);
    }

    public void outAAHexAChar(AAHexAChar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAHexAChar(AAHexAChar node)
    {
        inAAHexAChar(node);
        if(node.getNumeroHexa() != null)
        {
            node.getNumeroHexa().apply(this);
        }
        outAAHexAChar(node);
    }

    public void inAAOperacaoAConjunto(AAOperacaoAConjunto node)
    {
        defaultIn(node);
    }

    public void outAAOperacaoAConjunto(AAOperacaoAConjunto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOperacaoAConjunto(AAOperacaoAConjunto node)
    {
        inAAOperacaoAConjunto(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAOperacaoAConjunto(node);
    }

    public void inAAIntervaloAConjunto(AAIntervaloAConjunto node)
    {
        defaultIn(node);
    }

    public void outAAIntervaloAConjunto(AAIntervaloAConjunto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIntervaloAConjunto(AAIntervaloAConjunto node)
    {
        inAAIntervaloAConjunto(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAIntervaloAConjunto(node);
    }

    public void inAAEstrelaAOpUn(AAEstrelaAOpUn node)
    {
        defaultIn(node);
    }

    public void outAAEstrelaAOpUn(AAEstrelaAOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEstrelaAOpUn(AAEstrelaAOpUn node)
    {
        inAAEstrelaAOpUn(node);
        outAAEstrelaAOpUn(node);
    }

    public void inAAQMarkAOpUn(AAQMarkAOpUn node)
    {
        defaultIn(node);
    }

    public void outAAQMarkAOpUn(AAQMarkAOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAQMarkAOpUn(AAQMarkAOpUn node)
    {
        inAAQMarkAOpUn(node);
        outAAQMarkAOpUn(node);
    }

    public void inAAMaisAOpUn(AAMaisAOpUn node)
    {
        defaultIn(node);
    }

    public void outAAMaisAOpUn(AAMaisAOpUn node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMaisAOpUn(AAMaisAOpUn node)
    {
        inAAMaisAOpUn(node);
        outAAMaisAOpUn(node);
    }

    public void inAAMaisAOpBin(AAMaisAOpBin node)
    {
        defaultIn(node);
    }

    public void outAAMaisAOpBin(AAMaisAOpBin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMaisAOpBin(AAMaisAOpBin node)
    {
        inAAMaisAOpBin(node);
        outAAMaisAOpBin(node);
    }

    public void inAAMenosAOpBin(AAMenosAOpBin node)
    {
        defaultIn(node);
    }

    public void outAAMenosAOpBin(AAMenosAOpBin node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenosAOpBin(AAMenosAOpBin node)
    {
        inAAMenosAOpBin(node);
        outAAMenosAOpBin(node);
    }

    public void inAAProductions(AAProductions node)
    {
        defaultIn(node);
    }

    public void outAAProductions(AAProductions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProductions(AAProductions node)
    {
        inAAProductions(node);
        {
            List<PAProd> copy = new ArrayList<PAProd>(node.getProds());
            Collections.reverse(copy);
            for(PAProd e : copy)
            {
                e.apply(this);
            }
        }
        outAAProductions(node);
    }

    public void inAAProd(AAProd node)
    {
        defaultIn(node);
    }

    public void outAAProd(AAProd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProd(AAProd node)
    {
        inAAProd(node);
        if(node.getAlts() != null)
        {
            node.getAlts().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAProd(node);
    }

    public void inAAAlts(AAAlts node)
    {
        defaultIn(node);
    }

    public void outAAAlts(AAAlts node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAlts(AAAlts node)
    {
        inAAAlts(node);
        {
            List<PAAltsTail> copy = new ArrayList<PAAltsTail>(node.getResto());
            Collections.reverse(copy);
            for(PAAltsTail e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAAAlts(node);
    }

    public void inAAAltsTail(AAAltsTail node)
    {
        defaultIn(node);
    }

    public void outAAAltsTail(AAAltsTail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAltsTail(AAAltsTail node)
    {
        inAAAltsTail(node);
        if(node.getAlt() != null)
        {
            node.getAlt().apply(this);
        }
        outAAAltsTail(node);
    }

    public void inAAParsedAAlt(AAParsedAAlt node)
    {
        defaultIn(node);
    }

    public void outAAParsedAAlt(AAParsedAAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParsedAAlt(AAParsedAAlt node)
    {
        inAAParsedAAlt(node);
        {
            List<PAElem> copy = new ArrayList<PAElem>(node.getElems());
            Collections.reverse(copy);
            for(PAElem e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAParsedAAlt(node);
    }

    public void inAAIgnoredAAlt(AAIgnoredAAlt node)
    {
        defaultIn(node);
    }

    public void outAAIgnoredAAlt(AAIgnoredAAlt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIgnoredAAlt(AAIgnoredAAlt node)
    {
        inAAIgnoredAAlt(node);
        {
            List<PAElem> copy = new ArrayList<PAElem>(node.getElems());
            Collections.reverse(copy);
            for(PAElem e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAIgnoredAAlt(node);
    }

    public void inAAAltName(AAAltName node)
    {
        defaultIn(node);
    }

    public void outAAAltName(AAAltName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAltName(AAAltName node)
    {
        inAAAltName(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAAltName(node);
    }

    public void inAAElem(AAElem node)
    {
        defaultIn(node);
    }

    public void outAAElem(AAElem node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAElem(AAElem node)
    {
        inAAElem(node);
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getSpec() != null)
        {
            node.getSpec().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAElem(node);
    }

    public void inAAElemName(AAElemName node)
    {
        defaultIn(node);
    }

    public void outAAElemName(AAElemName node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAElemName(AAElemName node)
    {
        inAAElemName(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAElemName(node);
    }

    public void inAATokenASpecifier(AATokenASpecifier node)
    {
        defaultIn(node);
    }

    public void outAATokenASpecifier(AATokenASpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATokenASpecifier(AATokenASpecifier node)
    {
        inAATokenASpecifier(node);
        outAATokenASpecifier(node);
    }

    public void inAAProductionASpecifier(AAProductionASpecifier node)
    {
        defaultIn(node);
    }

    public void outAAProductionASpecifier(AAProductionASpecifier node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProductionASpecifier(AAProductionASpecifier node)
    {
        inAAProductionASpecifier(node);
        outAAProductionASpecifier(node);
    }

    public void inAAPrograma(AAPrograma node)
    {
        defaultIn(node);
    }

    public void outAAPrograma(AAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAPrograma(AAPrograma node)
    {
        inAAPrograma(node);
        if(node.getCmds() != null)
        {
            node.getCmds().apply(this);
        }
        if(node.getDclrs() != null)
        {
            node.getDclrs().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAPrograma(node);
    }

    public void inAADeclaracoes(AADeclaracoes node)
    {
        defaultIn(node);
    }

    public void outAADeclaracoes(AADeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADeclaracoes(AADeclaracoes node)
    {
        inAADeclaracoes(node);
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getDclrs());
            Collections.reverse(copy);
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAADeclaracoes(node);
    }

    public void inAAComandos(AAComandos node)
    {
        defaultIn(node);
    }

    public void outAAComandos(AAComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAComandos(AAComandos node)
    {
        inAAComandos(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getCmds());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        outAAComandos(node);
    }

    public void inAAAlterableDeclADeclaracao(AAAlterableDeclADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAAlterableDeclADeclaracao(AAAlterableDeclADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAlterableDeclADeclaracao(AAAlterableDeclADeclaracao node)
    {
        inAAAlterableDeclADeclaracao(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAAAlterableDeclADeclaracao(node);
    }

    public void inAAUnalterableDeclADeclaracao(AAUnalterableDeclADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAUnalterableDeclADeclaracao(AAUnalterableDeclADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAUnalterableDeclADeclaracao(AAUnalterableDeclADeclaracao node)
    {
        inAAUnalterableDeclADeclaracao(node);
        if(node.getVValor() != null)
        {
            node.getVValor().apply(this);
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAAUnalterableDeclADeclaracao(node);
    }

    public void inAAVectorDeclADeclaracao(AAVectorDeclADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAVectorDeclADeclaracao(AAVectorDeclADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVectorDeclADeclaracao(AAVectorDeclADeclaracao node)
    {
        inAAVectorDeclADeclaracao(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        if(node.getTamanhos() != null)
        {
            node.getTamanhos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAAVectorDeclADeclaracao(node);
    }

    public void inAANumberATipo(AANumberATipo node)
    {
        defaultIn(node);
    }

    public void outAANumberATipo(AANumberATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumberATipo(AANumberATipo node)
    {
        inAANumberATipo(node);
        outAANumberATipo(node);
    }

    public void inAAAnswerATipo(AAAnswerATipo node)
    {
        defaultIn(node);
    }

    public void outAAAnswerATipo(AAAnswerATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerATipo(AAAnswerATipo node)
    {
        inAAAnswerATipo(node);
        outAAAnswerATipo(node);
    }

    public void inAASymbolATipo(AASymbolATipo node)
    {
        defaultIn(node);
    }

    public void outAASymbolATipo(AASymbolATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolATipo(AASymbolATipo node)
    {
        inAASymbolATipo(node);
        outAASymbolATipo(node);
    }

    public void inAAUnalt(AAUnalt node)
    {
        defaultIn(node);
    }

    public void outAAUnalt(AAUnalt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAUnalt(AAUnalt node)
    {
        inAAUnalt(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAUnalt(node);
    }

    public void inAABloco(AABloco node)
    {
        defaultIn(node);
    }

    public void outAABloco(AABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABloco(AABloco node)
    {
        inAABloco(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getCmds());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getDclrs());
            Collections.reverse(copy);
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAABloco(node);
    }

    public void inAAAtribuicaoMatchedAMatchedStmt(AAAtribuicaoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAAtribuicaoMatchedAMatchedStmt(AAAtribuicaoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtribuicaoMatchedAMatchedStmt(AAAtribuicaoMatchedAMatchedStmt node)
    {
        inAAAtribuicaoMatchedAMatchedStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAAtribuicaoMatchedAMatchedStmt(node);
    }

    public void inAAVinculacaoMatchedAMatchedStmt(AAVinculacaoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAVinculacaoMatchedAMatchedStmt(AAVinculacaoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVinculacaoMatchedAMatchedStmt(AAVinculacaoMatchedAMatchedStmt node)
    {
        inAAVinculacaoMatchedAMatchedStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getUnalt() != null)
        {
            node.getUnalt().apply(this);
        }
        outAAVinculacaoMatchedAMatchedStmt(node);
    }

    public void inAACapturaMatchedAMatchedStmt(AACapturaMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAACapturaMatchedAMatchedStmt(AACapturaMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACapturaMatchedAMatchedStmt(AACapturaMatchedAMatchedStmt node)
    {
        inAACapturaMatchedAMatchedStmt(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PAExp> copy = new ArrayList<PAExp>(node.getCapRest());
            Collections.reverse(copy);
            for(PAExp e : copy)
            {
                e.apply(this);
            }
        }
        outAACapturaMatchedAMatchedStmt(node);
    }

    public void inAAShowMatchedAMatchedStmt(AAShowMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAShowMatchedAMatchedStmt(AAShowMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAShowMatchedAMatchedStmt(AAShowMatchedAMatchedStmt node)
    {
        inAAShowMatchedAMatchedStmt(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PAExp> copy = new ArrayList<PAExp>(node.getShowRest());
            Collections.reverse(copy);
            for(PAExp e : copy)
            {
                e.apply(this);
            }
        }
        outAAShowMatchedAMatchedStmt(node);
    }

    public void inAAEnquantoMatchedAMatchedStmt(AAEnquantoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAEnquantoMatchedAMatchedStmt(AAEnquantoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEnquantoMatchedAMatchedStmt(AAEnquantoMatchedAMatchedStmt node)
    {
        inAAEnquantoMatchedAMatchedStmt(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAEnquantoMatchedAMatchedStmt(node);
    }

    public void inAAIteracaoMatchedAMatchedStmt(AAIteracaoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAIteracaoMatchedAMatchedStmt(AAIteracaoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIteracaoMatchedAMatchedStmt(AAIteracaoMatchedAMatchedStmt node)
    {
        inAAIteracaoMatchedAMatchedStmt(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAIteracaoMatchedAMatchedStmt(node);
    }

    public void inAAAbadonMatchedAMatchedStmt(AAAbadonMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAAbadonMatchedAMatchedStmt(AAAbadonMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAbadonMatchedAMatchedStmt(AAAbadonMatchedAMatchedStmt node)
    {
        inAAAbadonMatchedAMatchedStmt(node);
        outAAAbadonMatchedAMatchedStmt(node);
    }

    public void inAAProxIteracaoMatchedAMatchedStmt(AAProxIteracaoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAProxIteracaoMatchedAMatchedStmt(AAProxIteracaoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProxIteracaoMatchedAMatchedStmt(AAProxIteracaoMatchedAMatchedStmt node)
    {
        inAAProxIteracaoMatchedAMatchedStmt(node);
        outAAProxIteracaoMatchedAMatchedStmt(node);
    }

    public void inAABlocoMatchedAMatchedStmt(AABlocoMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAABlocoMatchedAMatchedStmt(AABlocoMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoMatchedAMatchedStmt(AABlocoMatchedAMatchedStmt node)
    {
        inAABlocoMatchedAMatchedStmt(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAABlocoMatchedAMatchedStmt(node);
    }

    public void inAAIfComElseMatchedAMatchedStmt(AAIfComElseMatchedAMatchedStmt node)
    {
        defaultIn(node);
    }

    public void outAAIfComElseMatchedAMatchedStmt(AAIfComElseMatchedAMatchedStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIfComElseMatchedAMatchedStmt(AAIfComElseMatchedAMatchedStmt node)
    {
        inAAIfComElseMatchedAMatchedStmt(node);
        if(node.getMtched2() != null)
        {
            node.getMtched2().apply(this);
        }
        if(node.getMtched() != null)
        {
            node.getMtched().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAIfComElseMatchedAMatchedStmt(node);
    }

    public void inAAMatchedStatementAMatchedStmt2(AAMatchedStatementAMatchedStmt2 node)
    {
        defaultIn(node);
    }

    public void outAAMatchedStatementAMatchedStmt2(AAMatchedStatementAMatchedStmt2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMatchedStatementAMatchedStmt2(AAMatchedStatementAMatchedStmt2 node)
    {
        inAAMatchedStatementAMatchedStmt2(node);
        if(node.getMtched() != null)
        {
            node.getMtched().apply(this);
        }
        outAAMatchedStatementAMatchedStmt2(node);
    }

    public void inAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        defaultIn(node);
    }

    public void outAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        inAAAtribuicaoAComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAAtribuicaoAComando(node);
    }

    public void inAAVinculacaoAComando(AAVinculacaoAComando node)
    {
        defaultIn(node);
    }

    public void outAAVinculacaoAComando(AAVinculacaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVinculacaoAComando(AAVinculacaoAComando node)
    {
        inAAVinculacaoAComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getUnalt() != null)
        {
            node.getUnalt().apply(this);
        }
        outAAVinculacaoAComando(node);
    }

    public void inAACapturaAComando(AACapturaAComando node)
    {
        defaultIn(node);
    }

    public void outAACapturaAComando(AACapturaAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACapturaAComando(AACapturaAComando node)
    {
        inAACapturaAComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        {
            List<PAExp> copy = new ArrayList<PAExp>(node.getCapRest());
            Collections.reverse(copy);
            for(PAExp e : copy)
            {
                e.apply(this);
            }
        }
        outAACapturaAComando(node);
    }

    public void inAAShowAComando(AAShowAComando node)
    {
        defaultIn(node);
    }

    public void outAAShowAComando(AAShowAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAShowAComando(AAShowAComando node)
    {
        inAAShowAComando(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PAExp> copy = new ArrayList<PAExp>(node.getShowRest());
            Collections.reverse(copy);
            for(PAExp e : copy)
            {
                e.apply(this);
            }
        }
        outAAShowAComando(node);
    }

    public void inAAEnquantoAComando(AAEnquantoAComando node)
    {
        defaultIn(node);
    }

    public void outAAEnquantoAComando(AAEnquantoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEnquantoAComando(AAEnquantoAComando node)
    {
        inAAEnquantoAComando(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAEnquantoAComando(node);
    }

    public void inAAIteracaoAComando(AAIteracaoAComando node)
    {
        defaultIn(node);
    }

    public void outAAIteracaoAComando(AAIteracaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIteracaoAComando(AAIteracaoAComando node)
    {
        inAAIteracaoAComando(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getStep() != null)
        {
            node.getStep().apply(this);
        }
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAIteracaoAComando(node);
    }

    public void inAAAbadonAComando(AAAbadonAComando node)
    {
        defaultIn(node);
    }

    public void outAAAbadonAComando(AAAbadonAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAbadonAComando(AAAbadonAComando node)
    {
        inAAAbadonAComando(node);
        outAAAbadonAComando(node);
    }

    public void inAAProxIteracaoAComando(AAProxIteracaoAComando node)
    {
        defaultIn(node);
    }

    public void outAAProxIteracaoAComando(AAProxIteracaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProxIteracaoAComando(AAProxIteracaoAComando node)
    {
        inAAProxIteracaoAComando(node);
        outAAProxIteracaoAComando(node);
    }

    public void inAABlocoAComando(AABlocoAComando node)
    {
        defaultIn(node);
    }

    public void outAABlocoAComando(AABlocoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        inAABlocoAComando(node);
        if(node.getBloco() != null)
        {
            node.getBloco().apply(this);
        }
        outAABlocoAComando(node);
    }

    public void inAAIfComElseAComando(AAIfComElseAComando node)
    {
        defaultIn(node);
    }

    public void outAAIfComElseAComando(AAIfComElseAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIfComElseAComando(AAIfComElseAComando node)
    {
        inAAIfComElseAComando(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getMtched() != null)
        {
            node.getMtched().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAIfComElseAComando(node);
    }

    public void inAAIfSemElseAComando(AAIfSemElseAComando node)
    {
        defaultIn(node);
    }

    public void outAAIfSemElseAComando(AAIfSemElseAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIfSemElseAComando(AAIfSemElseAComando node)
    {
        inAAIfSemElseAComando(node);
        if(node.getCmd() != null)
        {
            node.getCmd().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAIfSemElseAComando(node);
    }

    public void inAAOrAExp(AAOrAExp node)
    {
        defaultIn(node);
    }

    public void outAAOrAExp(AAOrAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOrAExp(AAOrAExp node)
    {
        inAAOrAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAOrAExp(node);
    }

    public void inAAXorAExp(AAXorAExp node)
    {
        defaultIn(node);
    }

    public void outAAXorAExp(AAXorAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAXorAExp(AAXorAExp node)
    {
        inAAXorAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAXorAExp(node);
    }

    public void inAAAndAExp(AAAndAExp node)
    {
        defaultIn(node);
    }

    public void outAAAndAExp(AAAndAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAndAExp(AAAndAExp node)
    {
        inAAAndAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAAndAExp(node);
    }

    public void inAAEqAExp(AAEqAExp node)
    {
        defaultIn(node);
    }

    public void outAAEqAExp(AAEqAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAEqAExp(AAEqAExp node)
    {
        inAAEqAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAEqAExp(node);
    }

    public void inAANeqAExp(AANeqAExp node)
    {
        defaultIn(node);
    }

    public void outAANeqAExp(AANeqAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANeqAExp(AANeqAExp node)
    {
        inAANeqAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAANeqAExp(node);
    }

    public void inAALteqAExp(AALteqAExp node)
    {
        defaultIn(node);
    }

    public void outAALteqAExp(AALteqAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALteqAExp(AALteqAExp node)
    {
        inAALteqAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAALteqAExp(node);
    }

    public void inAAGteqAExp(AAGteqAExp node)
    {
        defaultIn(node);
    }

    public void outAAGteqAExp(AAGteqAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGteqAExp(AAGteqAExp node)
    {
        inAAGteqAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAGteqAExp(node);
    }

    public void inAALtAExp(AALtAExp node)
    {
        defaultIn(node);
    }

    public void outAALtAExp(AALtAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALtAExp(AALtAExp node)
    {
        inAALtAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAALtAExp(node);
    }

    public void inAAGtAExp(AAGtAExp node)
    {
        defaultIn(node);
    }

    public void outAAGtAExp(AAGtAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAGtAExp(AAGtAExp node)
    {
        inAAGtAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAGtAExp(node);
    }

    public void inAAAddAExp(AAAddAExp node)
    {
        defaultIn(node);
    }

    public void outAAAddAExp(AAAddAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAddAExp(AAAddAExp node)
    {
        inAAAddAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAAddAExp(node);
    }

    public void inAASubAExp(AASubAExp node)
    {
        defaultIn(node);
    }

    public void outAASubAExp(AASubAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASubAExp(AASubAExp node)
    {
        inAASubAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAASubAExp(node);
    }

    public void inAAMulAExp(AAMulAExp node)
    {
        defaultIn(node);
    }

    public void outAAMulAExp(AAMulAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMulAExp(AAMulAExp node)
    {
        inAAMulAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMulAExp(node);
    }

    public void inAADivAExp(AADivAExp node)
    {
        defaultIn(node);
    }

    public void outAADivAExp(AADivAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivAExp(AADivAExp node)
    {
        inAADivAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADivAExp(node);
    }

    public void inAADivIntAExp(AADivIntAExp node)
    {
        defaultIn(node);
    }

    public void outAADivIntAExp(AADivIntAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivIntAExp(AADivIntAExp node)
    {
        inAADivIntAExp(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADivIntAExp(node);
    }

    public void inAANegAExp(AANegAExp node)
    {
        defaultIn(node);
    }

    public void outAANegAExp(AANegAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANegAExp(AANegAExp node)
    {
        inAANegAExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAANegAExp(node);
    }

    public void inAANotAExp(AANotAExp node)
    {
        defaultIn(node);
    }

    public void outAANotAExp(AANotAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANotAExp(AANotAExp node)
    {
        inAANotAExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAANotAExp(node);
    }

    public void inAAParensAExp(AAParensAExp node)
    {
        defaultIn(node);
    }

    public void outAAParensAExp(AAParensAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParensAExp(AAParensAExp node)
    {
        inAAParensAExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAParensAExp(node);
    }

    public void inAASymbolValuesAExp(AASymbolValuesAExp node)
    {
        defaultIn(node);
    }

    public void outAASymbolValuesAExp(AASymbolValuesAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolValuesAExp(AASymbolValuesAExp node)
    {
        inAASymbolValuesAExp(node);
        if(node.getSymbolValues() != null)
        {
            node.getSymbolValues().apply(this);
        }
        outAASymbolValuesAExp(node);
    }

    public void inAANumeroAExp(AANumeroAExp node)
    {
        defaultIn(node);
    }

    public void outAANumeroAExp(AANumeroAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumeroAExp(AANumeroAExp node)
    {
        inAANumeroAExp(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outAANumeroAExp(node);
    }

    public void inAAAnswerValuesAExp(AAAnswerValuesAExp node)
    {
        defaultIn(node);
    }

    public void outAAAnswerValuesAExp(AAAnswerValuesAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerValuesAExp(AAAnswerValuesAExp node)
    {
        inAAAnswerValuesAExp(node);
        if(node.getAnswerValues() != null)
        {
            node.getAnswerValues().apply(this);
        }
        outAAAnswerValuesAExp(node);
    }

    public void inAAStringAExp(AAStringAExp node)
    {
        defaultIn(node);
    }

    public void outAAStringAExp(AAStringAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStringAExp(AAStringAExp node)
    {
        inAAStringAExp(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAStringAExp(node);
    }

    public void inAAIdentificador1AExp(AAIdentificador1AExp node)
    {
        defaultIn(node);
    }

    public void outAAIdentificador1AExp(AAIdentificador1AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdentificador1AExp(AAIdentificador1AExp node)
    {
        inAAIdentificador1AExp(node);
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAIdentificador1AExp(node);
    }

    public void inAAIdentificador2AExp(AAIdentificador2AExp node)
    {
        defaultIn(node);
    }

    public void outAAIdentificador2AExp(AAIdentificador2AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdentificador2AExp(AAIdentificador2AExp node)
    {
        inAAIdentificador2AExp(node);
        {
            List<PAExp> copy = new ArrayList<PAExp>(node.getArgs());
            Collections.reverse(copy);
            for(PAExp e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getNome() != null)
        {
            node.getNome().apply(this);
        }
        outAAIdentificador2AExp(node);
    }

    public void inAAVectorSizesAExp(AAVectorSizesAExp node)
    {
        defaultIn(node);
    }

    public void outAAVectorSizesAExp(AAVectorSizesAExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVectorSizesAExp(AAVectorSizesAExp node)
    {
        inAAVectorSizesAExp(node);
        if(node.getRest() != null)
        {
            node.getRest().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAVectorSizesAExp(node);
    }
}
