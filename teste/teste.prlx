{Código para realizar operação de um Full-Adder de acordo com as variáveis}
{dentro de um vetor}

{Observações}
{Adicição de um comando BREAK}
{operador de MÓDULO}
{Perguntar sobre o acesso do vetor quando ele possue apenas um 'linha'}

This is program Codigo.
It presents:
    vector of number (4X2) Entrada_Dec; {Vetor com as entradas em decimla para o Full-Adder}
    vector of number (4X8) Entrada_Bin; {Vetor com as entradas em binário para o Full-Adder}
    vector of number (4X2) Saida_Dec; {Vetor com as saidas em decimla do Full-Adder}
    vector of number (4X8) Saida_Bin; {Vetor com as saidas em binário do Full-Adder}

    alterable number Soma := -1; {Resultado da Soma das entradas por meio operador}
    unalterable number Media; {Resultado da média das entradas por meio operador}
    alterable number Media_FA := -1; {Resultado da média das entradas por meio do Full-Adder}

    vector of symbol (1X128) Resposta; {Resposta para debug de erros no sistema}

    alterable number I := 1;
    alterable number Contadora := 1;
    alterable number Contadorb := 1;
    alterable number Contadorc := 1;
    alterable number Contadord := 0;

    alterable number Atual_Dec := 0;
    alterable number (1X8) Atual_Bin := 0;

    alterable number A := 0;
    alterable number B := 0;
    alterable number Cin := 0;
    alterable number Cout := 0;
    alterable number S := 0;

    vector of number (1,3) Wire;


Let us begin:

    {========Declaração do vetor de entrada========}
    
    considering Contadora from 1 to 4 by 1 do [ 

        Resposta (1) := "Digite seu vetor de entrada:";
        
        show(Resposta);
        capture(Entrada_Dec(Contadora));

        just in case that ( Entrada_Dec(Contadora) != number) do [
            Resposta (1) := "Valor de entrada deve ser um número em decimal";
            show(Resposta);

            abandon;
        ]

        just in case that ( Entrada_Dec(Contadora) >= 100) do [
            Resposta (1) := "Valor de entrada deve ser um número em decimal menor que 100";
            show(Resposta);

            abandon;
        ]

        just in case that ( Entrada_Dec(Contadora) <= -100) do [
            Resposta (1) := "Valor de entrada deve ser um número em decimal maior que -100";
            show(Resposta);

            abandon;
        ]

    ]


    {========Cálculo da média dos valores de entrada========}

    considering Contadora from 1 to 4 by 1 do [
        Soma := Soma + Entrada_Dec(Contadora);
    ]

    Media = Soma // 4;


    {========Módulo de conversão do valor decimal para binário========}

    as long as ( (5 - Contadorb) != 0 ) do [
        Atual_Dec := Entrada_Dec(Contadorb);

        just in case that ( Atual_Dec == 0 ) do [
            Entrada_Bin(Contadorb, Contadorc) := 0;
        ]

        otherwise do [
            as long as ( Atual_Dec > 0 ) do [
                Entrada_Bin(Contadorb, Contadorc) := Atual_Dec {operador de MÓDULO AQUI!!!} 2;
                Atual_Dec := Atual_Dec // 2;
                Contadorc = Contadorc + 1;
            ]
        
        ]

        Contadorc := 1;
        Contadorb := Contadorb + 1;
    ]

    {========Módulo do Full-Adder========}

    {Soma as 4 entradas no vetor em pares}

    considering I from 1 to 4 by 2 do [
        
        considering Contadora from 1 to 8 by 1 do [
            A := Entrada_Bin(I,Contadora);
            B := Entrada_Bin(I+1,Contadora);
            Wire(1) := A xor B;
            Wire(2) := A and B;
            Wire(3) := Wire(1) and Cin;
            S := Wire(1) xor Cin;
            Cout := Wire(2) or Wire(3);
            
            Saida_Bin(I,Contadora) := S; 

        ]

    ]

    {Soma os 2 resultados das Somas}

    considering Contadora from 1 to 8 by 1 do [
        A := Saida_Bin(1,Contadora);
        B := Saida_Bin(3,Contadora);
        Wire(1) := A xor B;
        Wire(2) := A and B;
        Wire(3) := Wire(1) and Cin;
        S := Wire(1) xor Cin;
        Cout := Wire(2) or Wire(3);
        
        Saida_Bin(2,Contadora) := S; 

    ]


    {========Módulo de conversão do valor binário para decimal========}

    as long as ( (5 - Contadorb) != 0 ) do [
        Atual_Bin(Contadorb) := Saida_Bin(Contadorb);

        as long as ( 0 < (9 - Contadorc) ) do [

            {Improviso para realizar uma operação de expoente}
            considering Contadord from 0 to Contadorc by 1 do [

                just in case that ( Contadord == !(0) ) do [
                    Atual_Dec(Contadorb) := Atual_Dec(Contadorb) + Saida_Bin(Contadorb,Contadorc);
                    go to next iteration;
                ]

                otherwise do [

                    just in case that ( Saida_Bin(Contadorb,Contadorc) == 1 ) do [
                        Atual_Dec(Contadorb) := Atual_Dec(Contadorb) + ( ( Contadord * 2 ) * (Saida_Bin(Contadorb,Contadorc)) );
                    ]
                
                ]

            ]

            Contadorc := Contadorc + 1;
        ]

        Contadorb := Contadorb + 1;
    ]

    considering I from 1 to 4 by 1 do [
        Saida_Dec(I) := Atual_Dec(I);
    ]

    Media_FA := Saida_Dec(2) // 4;

    show(Saida_Dec);
    show(Media);
    show(Media_FA);


That would be all.
